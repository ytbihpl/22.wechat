<!--index.wxml-->
<!--
  框架最大的特点就是让我们开发者必须按照特定的方式编写代码
-->
<!--
  1. 数据在哪 （当前页面对象的data属性中）
  2. 绑定到哪里去 (想绑定到哪就在那里用mustache语法输出)
-->
<view class="container">

  <!-- 这种{{}}的语法叫做mustache -->
  <text>{{ message }}</text>
  <text>{{ person.name }}</text>
<!--
  mustache语法可以用在：
    1. innerHTML(类似)
    2. 元素的属性上
  不能用在标签名和属性名上
-->
  <view class="world {{ viewClassName }}"></view>

<!--
  可以直接使用字面量和简单的逻辑运算符
-->
  <text> {{ 'hello' }} </text>
  <text> {{ 111 }} </text>
  <text> {{ 111 + 999 }} </text>
  <text>{{ 100 > 50 ? '你对了' : '你错了' }}</text>
<!--
  当语法解析误解了true/false
  可以使用{{}}解决
-->
  <checkbox checked="{{ false }}"></checkbox>









<!--
  列表数据渲染
-->
  <view>
    <!--<view>
      <checkbox></checkbox>
      <text>JavaScript</text>
    </view>
    <view>
      <checkbox checked="{{true}}"></checkbox>
      <text>HTML</text>
    </view>
    <view>
      <checkbox></checkbox>
      <text>CSS</text>
    </view>-->
    <view wx:for="{{ todos }}" wx:for-item="aaa" wx:for-index="i">
      <text>{{ i }}</text>
      <checkbox checked="{{ aaa.completed }}"></checkbox>
      <text>{{ aaa.name }}</text>
      <!-- 如果全局属性中有item这种关键词, 可以使用wx:for-item去给当前遍历数据起名字 -->
      <text>{{ item }}</text>
    </view>
    <!--
      基本的循环 wx:for
      1. 明确页面结构中的循环体
      2. 删除多余的重复内容，只保留一个
      3. 在剩下的这个上加上wx:for属性， 属性值等于要遍历的数据源，数据源必须是一个数组
      4. 在这个标签（循环体）内部使用item代表当前被遍历的元素
      给被遍历到的对象定义名称 wx:for-item
      给遍历的下标（索引）定义名称 wx:for-index
    -->











<!--
  循环的嵌套
-->
    <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="i">
      <view wx:for="{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}" wx:for-item="j">
      <!-- wx:if 是用来根据一个bool值决定显示或隐藏 -->
        <view wx:if="{{i <= j}}">
          {{i}} * {{j}} = {{i * j}}
        </view>
      </view>
    </view>
  </view>
</view>
